import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

# Settings
models = ['QcritPoints_500k', 'QcritPoints_1.1mill', 'QcritPoints_2.5mill']
timesteps = ['0,30', '0,35', '0,40', '0,45']
data_dir = r"C:\Users\magnuswe\OneDrive - SINTEF\Simvascular\results\last_cycle\AAA001_sim_0-19_1-1mill-last_cycle"

slice_file = 'slice_points.csv'  # CSV file with slice points

# --- Manual Area and Volume inputs: Format -> model -> list per timestep ---

area_500k_0_30 = 
area_500k_0_35 = 
area_500k_0_40 = 
area_500k_0_45 = 

area_1_1mill_0_30 = 23.4109202
area_1_1mill_0_35 = 
area_1_1mill_0_40 = 
area_1_1mill_0_45 =

area_2_5mill_0_30 = 
area_2_5mill_0_35 = 
area_2_5mill_0_40 = 
area_2_5mill_0_45 = 

area_data = {
    'QcritPoints_500k': [12.5, 13.1, 13.8, 14.2],
    'QcritPoints_1.1mill': [12.6, 13.0, 13.9, 14.5],
    'QcritPoints_2.5mill': [12.4, 13.2, 13.7, 14.4]
}

volume_500k_0_30 = 
volume_500k_0_35 = 
volume_500k_0_40 = 
volume_500k_0_45 = 

volume_1_1mill_0_30 = -1.3863976*-1
volume_1_1mill_0_35 = 
volume_1_1mill_0_40 = 
volume_1_1mill_0_45 = 

volume_2_5mill_0_30 = 
volume_2_5mill_0_35 = 
volume_2_5mill_0_40 = 
volume_2_5mill_0_45 = 

volume_data = {
    'QcritPoints_500k': [volume_500k_0_30, volume_500k_0_35, volume_500k_0_40, volume_500k_0_45],
    'QcritPoints_1.1mill': [volume_1_1mill_0_30, volume_1_1mill_0_35, volume_1_1mill_0_40, volume_1_1mill_0_45],
    'QcritPoints_2.5mill': [volume_2_5mill_0_30, volume_2_5mill_0_35, volume_2_5mill_0_40, volume_2_5mill_0_45]
}

# Initialize result containers
distances = {model: [] for model in models}
area_volume_ratio = {model: [] for model in models}

# Load slice points
slice_filepath = os.path.join(data_dir, slice_file)
slice_df = pd.read_csv(slice_filepath)
slice_points = slice_df[['Points_0', 'Points_1', 'Points_2']].to_numpy()

# Process each CSV
for model in models:
    for i, timestep in enumerate(timesteps):
        filename = f"{model}_{timestep}.csv"
        filepath = os.path.join(data_dir, filename)

        try:
            df = pd.read_csv(filepath)

            if not {'Points_0', 'Points_1', 'Points_2'}.issubset(df.columns):
                raise ValueError(f"{filename} missing Points_0, Points_1, or Points_2 columns")

            com = np.array([
                df['Points_0'].mean(),
                df['Points_1'].mean(),
                df['Points_2'].mean()
            ])

            distances_to_slice = np.linalg.norm(slice_points - com, axis=1)
            min_dist = np.min(distances_to_slice)
            distances[model].append(min_dist)

            # Compute area-to-volume ratio
            area = area_data[model][i]
            volume = volume_data[model][i]
            ratio = area / volume if volume != 0 else np.nan
            area_volume_ratio[model].append(ratio)

        except Exception as e:
            print(f"Error reading {filename}: {e}")
            distances[model].append(np.nan)
            area_volume_ratio[model].append(np.nan)

# --- Plotting section ---
plt.figure(figsize=(10, 6))
for model in models:
    plt.plot(timesteps, distances[model], marker='o', label=model)
plt.title("Distance from Center of Mass to Closest Slice Point")
plt.xlabel("Timestep")
plt.ylabel("Min Distance [mm]")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
for model in models:
    plt.plot(timesteps, area_volume_ratio[model], marker='s', label=model)
plt.title("Area-to-Volume Ratio Over Time")
plt.xlabel("Timestep")
plt.ylabel("Area / Volume")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
for model in models:
    plt.plot(timesteps, area_data[model], marker='^', label=model)
plt.title("Area Over Time")
plt.xlabel("Timestep")
plt.ylabel("Area [mm²]")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
for model in models:
    plt.plot(timesteps, volume_data[model], marker='v', label=model)
plt.title("Volume Over Time")
plt.xlabel("Timestep")
plt.ylabel("Volume [mm³]")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
